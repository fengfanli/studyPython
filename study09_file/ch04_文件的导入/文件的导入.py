import time as mytime
from time import ctime #部分导入
import sys

# print(time.ctime())
print('as 作用：')
print(mytime.ctime())
print('from。。。impot 直接导入方法')
print(ctime())
print('查看 import 的所有路径')
print(sys.path)




'''
1、from ...import 首次导入发生了3个步骤
1 以模块为准创造一个模块的名称空间
2 执行模块对应的文件了，将执行过程中产生的名字都丢到模块的名称空间
3 在当前执行文件的名称空间中拿到一个名字，该名字直接指向模块中的某一个名字,
意味着可以不用加任何的前缀而直接使用

2、 优缺点：
优点：不用加前缀 代码更加简洁了
缺点: 容易与当前执行文件中名称空间中的名字冲突


3、 import 到首次导入模块的时候 会发生如下3步操作
1 打开模块文件
2 执行模块对应的文件，将执行过程中产生的名字都丢到模块的名称空间
3 在程序中会有一个模块【可以取别名的】的名称指向模块的名称空间去

4、 相同点和不同点
相同
都会执行模块对应的文件 并且呢 都会产生模块课的名称空间
两者在调用功能时呢，都需要转到定义时寻找作用域关系
不同点
import 需要加前缀  from...import 不需要加前缀
'''


'''
当解释器遇到import关键字，如果模块在当前的搜索路径就会被导入。 
查看import导入的搜索路径，导入模块时会优先搜索当前目录下是否有这个名字的模块，所以在模块命名的时候不要与系统中的模块有重名。
（1）、当前目录
（2）、如果当前目录没有，到环境变量中搜索，可以用sys模块中的path变量查看所有路径。  
（3）、如果都找不到，搜索默认路径，linux系统，默认路径一般为/usr/local/lib/python/
'''
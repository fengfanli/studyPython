'''
前面学习面向对象过程中，修改类属性都是直接通过类名修改的。如果有些重要属性不想让别人随便修改，
或者防止意外修改，该怎么办？

为了更好的保存属性安全，即不能随意修改，将属性定义为私有属性，添加一个可调用的方法去访问。
'''

# 使用私有属性的场景：
# 1.把特定的一个属性隐藏起来  不想让类的外部进行直接调用
# 2.我想保护这个属性 不想让属性的值随意的改变
# 3.保护这个属性   不想让派生类【子类】去继承

# 私有属性的语法（定义）：
# 两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。如下
# class Persion(object):
#     __age = 18 # 定义一个私有化属性，属性名字前面加两个下划线
#     pass

# 私有属性的特性：
# 1. 私有化属性不能在类外面访问。
# 2. 私有化属性可以在类里面访问，修改。
# 3. 子类不能继承私有化属性。



# 最后小结：
# 1 私有化的【实例】属性 不能再外部直接的访问  可以在类的内部随意的使用
# 2.子类不能继承父类的私有化属性【只能继承父类公共的属性和行为】
# 3. 在属性名的前面直接加‘ __’  就可以变为私有化了

class Person:
    __hobby = '跳舞'  # 私有的 类属性

    def __init__(self):
        self.__name = '李四'  # 加两个下划线 将此属性私有化之后  就不能再外部直接访问了,在类的内部可以访问
        self.age = 30
        pass

    def __str__(self):
        '''
        私有化的属性在内部可以使用 self.__name
        :return:
        '''
        return '{}的年龄是{} 爱好是{}'.format(self.__name, self.age, Person.__hobby)

    def changeValue(self):
        Person.__hobby = '唱歌'


class Student(Person):
    def printInfo(self):
        # print(self.__name)  #在此访问父类中的私有属性 可以吗?   不可以
        print(self.age)

    pass


print('--------要点一：私有属性 是不能 通过 实例对象访问的。私有属性 可以被类中其他方法使用')
xl = Person()
# print(xl.__name) #报错，私有属性 是不能 通过 实例对象访问的。
print(xl)   # 私有属性 可以被类中其他方法使用


print('--------要点二：私有属性 是不能被继承的，继承的类也就不能调用父类的私有属性，')
# 私有属性 是不能被继承的
stu = Student()
# print(stu.__name)  #报错，子类不能调用 父类的私有属性
stu.printInfo()

print('--------要点三：私有属性 在类中 可以被 类对象 所修改')
stu.changeValue()  # 修改私有属性的值
print(stu)

print('--------要点四：继承后的 类对象和 实例对象 也不能访问 私有对象')
# print(stu.__hobby) #实例对象访问类属性
# print(Person.__hobby) #实例对象访问类属性


